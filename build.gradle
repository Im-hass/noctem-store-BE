plugins {
    id 'org.springframework.boot' version '2.6.8'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'java'
//    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id 'com.google.cloud.tools.jib' version '3.3.0'
}

jib {
    from {
        auth {
            username = System.getenv("DOCKERHUB_ID")
            password = System.getenv("DOCKERHUB_PW")
        }
    }
    to {
        image = System.getenv("DOCKERHUB_IMG_STORE")
        tags = [System.getenv("IMG_TAG")]
        auth {
            username = System.getenv("DOCKERHUB_ID")
            password = System.getenv("DOCKERHUB_PW")
        }
    }
    container {
        volumes = ["/tmp"]
        environment = [
                "NOCTEM_DB_USERNAME"          : System.getenv("NOCTEM_DB_USERNAME"),
                "NOCTEM_DB_PASSWORD"          : System.getenv("NOCTEM_DB_PASSWORD"),
                "NOCTEM_DB_READ_ONLY_USERNAME": System.getenv("NOCTEM_DB_READ_ONLY_USERNAME"),
                "NOCTEM_DB_READ_ONLY_PASSWORD": System.getenv("NOCTEM_DB_READ_ONLY_PASSWORD"),
                "NOCTEM_JWT_SIGNER"           : System.getenv("NOCTEM_JWT_SIGNER"),
                "EUREKA_SERVER"               : "eureka",
                "MYSQL_SERVER"                : "mysqldb",
                "KAFKA_SERVER"                : "kafka",
                "CONFIG_SERVER"               : "config",
                "REDIS_SERVER"                : "redis",
                "USER_SERVICE"                : "user-service",
                "PURCHASE_SERVICE"            : "purchase-service",
                "MENU_SERVICE"                : "menu-service",
                "STORE_SERVICE"               : "store-service",
                "ADMIN_SERVICE"               : "admin-service",
                "GIFT_SERVICE"                : "gift-service"
        ]
    }
}

group = 'noctem'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.4")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.cloud:spring-cloud-starter-bus-kafka'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation 'io.fusionauth:fusionauth-jwt:5.2.0'
//    implementation "com.querydsl:querydsl-jpa:5.0.0"
//    annotationProcessor "com.querydsl:querydsl-apt:5.0.0"
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

//def querydslDir = "$buildDir/generated/querydsl"
//querydsl {
//    jpa = true
//    querydslSourcesDir = querydslDir
//}
//sourceSets {
//    main.java.srcDir querydslDir
//}
//compileQuerydsl {
//    options.annotationProcessorPath = configurations.querydsl
//}
//configurations {
//    querydsl.extendsFrom compileClasspath
//}